// 声明Android程序
apply plugin: 'com.android.application'


def cfg = rootProject.ext.android // 工程配置

android {
    // 编译版本
    compileSdkVersion rootProject.ext.compileSdkVersion
    // 构建工作的版本
    buildToolsVersion rootProject.ext.buildToolsVersion
    defaultConfig {
        // 应用包名
        applicationId "com.myjoke"
        // 项目兼容最低版本
        minSdkVersion rootProject.ext.minSdkVersion
        // 项目目标版本
        targetSdkVersion rootProject.ext.targetSdkVersion
        // 项目版本号
        versionCode rootProject.ext.versionCode
        // 项目版本名
        versionName rootProject.ext.versionName
        // 把AndroidJUnitRunner设置成默认的testInstrumentationRunner
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }

        ndk {
            abiFilters "armeabi","armeabi-v7a","x86", "mips"
        }

//         multiDexEnabled true  // 添加多dex分包支持
    }
    buildTypes {
//        debug {
//            minifyEnabled false
////            shrinkResources false
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//        }
        release {
            // 是否对代码进行混淆
            minifyEnabled false
            // 指定混淆时使用的规则文件。
            // proguard-android.txt是在Android SDK目录下，里面是所有项目通用的混淆规则（在sdk\tools\proguard下）。
            // proguard-rules.pro是当前项目的根目录下，里面可以编写当前项目特有的混淆规则。
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    // 保证其他的lib没有被preDex
//    dexOptions {
//        preDexLibraries = false
//    }

//    dexOptions {
//        dexInProcess true
//        preDexLibraries true
//        javaMaxHeapSize "4g"//越大越好 javaMaxHeapSize对应正则表达式是"\\d+[kKmMgGtT]?"4g指4G字节。
//        incremental true
//    }

    //android studio默认so文件加载目录为:src/main/jniLibs
    //如在module的build.gradle按照如下方式,自定义了so文件加载目录请确保对应目录下只有armeabi目录
    //    sourceSets {
    //        main{
    //            jniLibs.srcDirs = ['libs']
    //        }
    //    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')

    // butterknife
    annotationProcessor "com.jakewharton:butterknife-compiler:$rootProject.bufferknifeVersion"

    // arouter
    annotationProcessor "com.alibaba:arouter-compiler:$rootProject.arouterCompilerVersion"

    if (!isDebug.toBoolean()) {
        compile project(':baselibrary')
        compile project(':baseview')
        compile project(':recyclerviewdemo')
        compile project(':supportdesignview')
        compile project(':systeminfo')
        compile project(':dialogdemo')
        compile project(':scrollerdemo')
        compile project(':eventdemo')
        compile project(':materialdemo')
        compile project(':permissiondemo')
        compile project(':okhttpdemo')
        compile project(':glidedemo')
        compile project(':fourmodule')
        compile project(':viewpagerdemo')
        compile project(':webviewdemo')


        compile project(':newsmodule')
//        compile project(':activitymodule')
//        compile project(':messagemodule')
//        compile project(':mymodule')
    }

    compile project(':mybind')
    compile project(':myannotations')
    annotationProcessor project(':mycompiler')


    compile "com.android.support:support-v4:$rootProject.supportLibraryVersion"


    // LeakCanary 检测内存泄漏，只在debug下面有效，不会影响release的
    //releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'
    testCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'
    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.5'

    // 通过facebook开源工具Stetho查看
    compile 'com.facebook.stetho:stetho:1.5.0'
    compile 'com.facebook.stetho:stetho-urlconnection:1.5.0'


    // MultiDex的依赖
//     compile'com.android.support:multidex:1.0.0'
}
